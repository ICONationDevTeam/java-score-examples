version = '0.9.1'

// for integration tests
sourceSets {
    intTest {}
}
configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    compileOnly 'foundation.icon:javaee-api:0.8.4'
    implementation 'com.github.sink772:javaee-scorex:0.5.1'
    implementation 'com.github.sink772:minimal-json:0.9.6'

    testImplementation project(':testsvc')
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

    intTestImplementation project(':testinteg')
    intTestImplementation 'foundation.icon:icon-sdk:0.9.15'
    intTestRuntimeOnly project(':hello-world')
}

optimizedJar {
    mainClassName = 'com.iconloop.score.example.MultiSigWallet'
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}

def helloWorldJar = project(':hello-world').getTasks().getByName('optimizedJar')

task integrationTest(type: Test, dependsOn: optimizedJar) {
    useJUnitPlatform()
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    testLogging.showStandardStreams = true

    // use the common config files
    systemProperty('env.props', new File(project(':testinteg').projectDir, 'conf/env.props'))

    def prefix = 'score.path.'
    systemProperty(prefix + project.name, optimizedJar.outputJarName)
    systemProperty(prefix + 'hello-world', helloWorldJar.outputJarName)
}

integrationTest.dependsOn(helloWorldJar)
