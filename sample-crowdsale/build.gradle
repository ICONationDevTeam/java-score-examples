version = '0.1.0'

// for integration tests
sourceSets {
    intTest {}
}
configurations {
    intTestImplementation.extendsFrom testImplementation
    intTestRuntimeOnly.extendsFrom testRuntimeOnly
}

dependencies {
    compileOnly 'foundation.icon:javaee-api:0.8.4'

    testImplementation project(':sample-token')
    testImplementation project(':testsvc')
    testImplementation 'org.mockito:mockito-core:3.3.3'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

    intTestImplementation project(':testinteg')
    intTestImplementation 'foundation.icon:icon-sdk:2.0.0-SNAPSHOT'
}

optimizedJar {
    mainClassName = 'com.iconloop.score.example.SampleCrowdsale'
    archivesBaseName = 'sample-crowdsale'
}

test {
    useJUnitPlatform()
}

project(':sample-token').setProperty('version', version)
def sampleTokenJar = project(':sample-token').getTasks().getByName('optimizedJar')

task integrationTest(type: Test, dependsOn: optimizedJar) {
    useJUnitPlatform()
    description = 'Runs integration tests.'
    group = 'verification'

    testClassesDirs = sourceSets.intTest.output.classesDirs
    classpath = sourceSets.intTest.runtimeClasspath
    testLogging.showStandardStreams = true

    // use the common config files
    systemProperty('env.props', new File(project(':testinteg').projectDir, 'conf/env.props'))

    def prefix = 'score.path.'
    systemProperty(prefix + project.name, optimizedJar.outputJarName)
    systemProperty(prefix + 'sample-token', sampleTokenJar.outputJarName)
}

integrationTest.dependsOn(sampleTokenJar)
